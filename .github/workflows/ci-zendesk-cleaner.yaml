name: CI Zendesk Cleaner

on:
  push:
    # paths:
    #   - 'functions/zendesk-cleaner/**'
  pull_request:
  workflow_dispatch:
    # paths:
    #   - 'functions/zendesk-cleaner/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v3
      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.10'
      # - name: Install dependencies
      #   run: pip install -r functions/zendesk-cleaner/requirements.txt
      - name: Lint
        run: |
          # pip install flake8
          # flake8 functions/zendesk-cleaner/main.py
          echo "Linting step is currently disabled."

  test:
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v3
      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.10'
      # - name: Install dependencies
      #   run: pip install -r functions/zendesk-cleaner/requirements.txt
      - name: Run tests
        # run: pytest functions/zendesk-cleaner/
        run: echo "Testing step is currently disabled."

  build-staging:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create Lambda ZIP
        run: |
          pip install -r ./functions/zendesk-cleaner/requirements.txt
          zip -r zendesk-cleaner.zip ./functions/request-cleaner
      - uses: actions/upload-artifact@v4
        with: { name: zendesk-cleaner-zip-staging, path: zendesk-cleaner.zip }
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Pulumi
        uses: pulumi/actions@v5
      - name: Run Pulumi Preview
        working-directory: ./infrastructure
        run: |
          pulumi login ${{ secrets.PULUMI_BACKEND_URL }}
          pulumi stack select staging --create
          pulumi preview --non-interactive
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          PULUMI_BACKEND_URL: s3://0202-pulumi-state/neurion-ai/zendesk-consumer

  deploy-staging:
    needs: build-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { name: zendesk-cleaner-zip-staging }
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Pulumi
        uses: pulumi/actions@v5
      - name: Run Pulumi Deploy
        working-directory: ./infrastructure
        run: |
          pulumi login ${{ secrets.PULUMI_BACKEND_URL }}
          pulumi stack select staging --create
          pulumi preview --non-interactive
          pulumi up --yes --non-interactive
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          PULUMI_BACKEND_URL: s3://0202-pulumi-state/neurion-ai/zendesk-consumer


  # deploy-production:
  #   if: github.ref == 'refs/heads/main'
  #   needs: build-production
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Download artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: zendesk-cleaner-production
  #     - name: Install Pulumi dependencies
  #       run: pip install -r infrastructure/requirement.txt
  #     - name: Pulumi Deploy (Production)
  #       env:
  #         PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         PULUMI_BACKEND_URL: s3://your-production-bucket/production-folder/
  #       run: |
  #         pulumi stack select production
  #         pulumi up --yes --cwd infrastructure
